#!/usr/bin/env python
# coding: utf-8




import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import statsmodels.api as sm
from statsmodels.formula.api import ols





# Function to be able to pass in part of dataframe and generate swarmplot boxplot and statistical values
def generate_graph(df, title):
    df_melt = pd.melt(df.reset_index(), id_vars=['index'], value_vars=['high', 'mod', 'low'])
    df_melt.columns = ['index', 'level', 'value']
    ax = sns.boxplot(x='level', y='value', data=df_melt, color='#99c2a2')
    ax = sns.swarmplot(x="level", y="value", data=df_melt, color='#7d0013')
    plt.title(title)
    plt.show()
    plt.clf
    
    #print(df_melt.head())
    fvalue, pvalue = stats.f_oneway(df['high'], df['mod'], df['low'])
    print(f'fvalue: {fvalue}\n pvalue: {pvalue}')
    model = ols('value ~ C(level)', data=df_melt).fit()
    anova_table = sm.stats.anova_lm(model, typ=2)
    print('\n')
    print(anova_table)





# Uploading stored dataframe from previous file grouped by high, moderate, and low stress

get_ipython().run_line_magic('store', '-r df')
df





# Setting high stress group of dataframe to high, low to low, moderate to mod

high = df.iloc[0]
low = df.iloc[1]
mod = df.iloc[2]





# Printing all survey questions next to index from 1-50 to be able to easily refference 
# Exact questions included in all comparisions for ANOVA

for i in range(len(df.columns)):
    col = df.columns[i]
    print(f'{i}: {col}')





# Since the swarmplot boxplot and ANOVA require the same sized groups,
# This function prints the first 64 values for high, moderate, and low stress
# For each question or range of questions passed into it

def sameLengthList(ques):
    
    newHigh = []
    newLow = []
    newMod = []
    
    for quest in ques:
    
        newHigh.extend(high.iloc[quest][0:64])
        newLow.extend(low.iloc[quest][0:64])
        newMod.extend(mod.iloc[quest][0:64])
    
    print('High:')
    print(newHigh)
    print('\n Low:')
    print(newLow)
    print('\n Mod:')
    print(newMod)


# # For each section and subsection, these functions were called to generate graphs and statistical values
# # Ex: Generating graphs and pvalue for Ability to Understand What Another Person Is Thinking / Feeling
# ## This section ran analysis on 8 questions:  I feel like I have a strong understanding of that person’s emotions, I know what that person is thinking, I feel like I have a strong understanding of that person’s emotions (1),  I know what that person is thinking (1), I feel like I have a strong understanding of that person’s emotions (2),I know what that person is thinking (2), I feel like I have a strong understanding of that person’s emotions (3) ,I know what that person is thinking (3)




# Using function sameLengthList to print out first 64 values to each question included in this analysis by 
# high, moderate, and low stress

sameLengthList([23,24,27,28,31,32,34,35])



# Use values for high, low, and moderate stress printed by sameLengthList to generate graphs and ANOVA
otherFeelingsandThoughts = {'high': [3.0, 2.0, 6.0, 4.0, 5.0, 5.0, 1.0, 3.0, 5.0, 5.0, 6.0, 4.0, 5.0, 1.0, 5.0, 5.0, 4.0, 5.0, 6.0, 4.0, 4.0, 2.0, 1.0, 4.0, 5.0, 0.0, 3.0, 4.0, 4.0, 5.0, 5.0, 4.0, 0.0, 6.0, 4.0, 4.0, 6.0, 5.0, 5.0, 4.0, 6.0, 3.0, 5.0, 5.0, 5.0, 4.0, 5.0, 2.0, 6.0, 4.0, 5.0, 5.0, 6.0, 5.0, 5.0, 4.0, 4.0, 4.0, 6.0, 5.0, 4.0, 5.0, 5.0, 5.0, 3.0, 2.0, 4.0, 2.0, 4.0, 4.0, 2.0, 4.0, 5.0, 5.0, 4.0, 4.0, 4.0, 1.0, 2.0, 5.0, 4.0, 4.0, 5.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 0.0, 3.0, 4.0, 0.0, 4.0, 6.0, 4.0, 0.0, 5.0, 3.0, 4.0, 6.0, 5.0, 4.0, 4.0, 5.0, 0.0, 5.0, 5.0, 6.0, 4.0, 4.0, 1.0, 5.0, 5.0, 5.0, 4.0, 6.0, 0.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 4.0, 4.0, 5.0, 5.0, 5, 1, 6, 3, 6, 6, 5, 6, 6, 6, 6, 5, 5, 1, 5, 6, 5, 6, 6, 4, 6, 0, 6, 4, 6, 6, 4, 6, 4, 6, 6, 4, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 5, 0, 6, 5, 6, 6, 0, 5, 5, 5, 6, 6, 5, 4, 5, 5, 6, 5, 1, 5, 2, 6, 4, 2, 6, 6, 5, 6, 4, 5, 1, 3, 6, 5, 4, 5, 4, 6, 1, 1, 3, 6, 6, 3, 6, 0, 4, 5, 4, 0, 6, 3, 4, 6, 6, 4, 5, 3, 6, 6, 5, 6, 4, 4, 3, 0, 5, 5, 5, 6, 0, 4, 5, 4, 5, 6, 5, 2, 4, 5, 6, 3, 5, 6, 6, 2, 5, 4, 2, 5, 4, 1, 5, 6, 6, 4, 6, 4, 4, 4, 5, 2, 1, 1, 5, 5, 5, 4, 6, 4, 5, 6, 4, 3, 5, 5, 3, 6, 2, 5, 5, 2, 0, 3, 4, 5, 4, 6, 5, 2, 2, 5, 6, 5, 0, 5, 5, 2, 1, 6, 4, 4, 5, 5, 5, 2, 5, 6, 6, 2, 5, 4, 3, 5, 5, 4, 6, 5, 6, 1, 6, 4, 4, 5, 5, 2, 1, 4, 3, 5, 5, 4, 5, 0, 5, 3, 4, 1, 4, 4, 3, 6, 2, 4, 3, 2, 0, 2, 4, 3, 2, 4, 3, 2, 2, 5, 5, 5, 0, 5, 4, 4, 1, 5, 4, 4, 5, 5, 5, 4, 4, 6, 5, 5, 5, 2, 3, 5, 5, 6, 4, 4, 6, 5, 6, 2, 4, 4, 5, 4, 1, 5, 5, 6, 6, 4, 4, 4, 6, 6, 4, 3, 5, 5, 3, 6, 2, 5, 5, 0, 4, 6, 5, 6, 4, 6, 5, 5, 4, 5, 5, 5, 0, 6, 6, 4, 4, 4, 4, 4, 5, 6, 5, 3, 4, 6, 5, 5, 4, 1, 3, 5, 5, 6, 4, 5, 6, 3, 6, 2, 5, 4, 5, 4, 6, 4, 3, 5, 6, 4, 4, 0, 5, 5, 4, 4, 5, 3, 3, 6, 4, 4, 5, 4, 3, 6, 5, 6, 4, 5, 4, 5, 4, 5, 4, 5, 0, 5, 5, 4, 2, 4, 5, 2, 6, 6, 5],  
     'low': [5.0, 5.0, 6.0, 6.0, 4.0, 5.0, 6.0, 4.0, 4.0, 5.0, 4.0, 6.0, 3.0, 2.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 5.0, 5.0, 4.0, 6.0, 4.0, 6.0, 5.0, 3.0, 4.0, 5.0, 4.0, 5.0, 5.0, 4.0, 5.0, 6.0, 3.0, 5.0, 5.0, 5.0, 5.0, 4.0, 5.0, 5.0, 1.0, 1.0, 6.0, 5.0, 4.0, 3.0, 5.0, 5.0, 5.0, 6.0, 5.0, 5, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 4.0, 6.0, 5.0, 6.0, 6.0, 4.0, 5.0, 6.0, 5.0, 3.0, 5.0, 2.0, 6.0, 5.0, 4.0, 2.0, 2.0, 4.0, 5.0, 4.0, 3.0, 2.0, 6.0, 5.0, 4.0, 5.0, 5.0, 5.0, 5.0, 3.0, 4.0, 5.0, 4.0, 5.0, 4.0, 4.0, 5.0, 4.0, 2.0, 5.0, 5.0, 5.0, 4.0, 3.0, 4.0, 5.0, 1.0, 1.0, 6.0, 4.0, 4.0, 3.0, 4.0, 2.0, 5.0, 5.0, 5.0, 5.0, 3.0, 2.0, 5.0, 5.0, 5.0, 5.0, 3.0, 5, 5, 6, 5, 5, 5, 6, 5, 4, 5, 5, 4, 6, 6, 6, 4, 5, 6, 4, 4, 5, 6, 4, 5, 5, 5, 5, 6, 4, 5, 4, 6, 6, 6, 5, 4, 6, 5, 6, 6, 6, 4, 5, 4, 2, 5, 2, 6, 6, 4, 6, 5, 5, 2, 6, 6, 5, 6, 4, 6, 4, 6, 5, 4, 6, 6, 6, 6, 5, 5, 6, 5, 4, 5, 2, 4, 5, 6, 3, 2, 5, 6, 4, 1, 5, 6, 4, 5, 6, 4, 6, 2, 4, 4, 5, 6, 6, 5, 5, 1, 4, 3, 1, 6, 6, 4, 4, 4, 2, 5, 2, 6, 4, 4, 5, 2, 3, 3, 5, 6, 1, 6, 2, 6, 6, 6, 5, 3, 6, 6, 6, 6, 5, 5, 6, 5, 4, 5, 4, 4, 4, 2, 5, 5, 5, 4, 4, 5, 5, 6, 5, 5, 6, 5, 6, 4, 5, 5, 5, 5, 6, 5, 6, 5, 3, 5, 6, 6, 6, 5, 5, 4, 5, 5, 5, 5, 6, 4, 5, 2, 3, 4, 6, 5, 1, 5, 5, 5, 1, 5, 5, 3, 6, 6, 6, 6, 5, 5, 6, 5, 4, 5, 4, 4, 4, 4, 1, 5, 5, 4, 4, 5, 5, 6, 5, 5, 6, 4, 6, 4, 5, 5, 4, 4, 6, 3, 6, 5, 5, 4, 5, 6, 6, 3, 4, 5, 5, 5, 5, 5, 4, 4, 5, 2, 4, 5, 5, 5, 1, 6, 4, 4, 2, 4, 5, 4, 6, 6, 6, 6, 5, 5, 6, 5, 3, 5, 4, 6, 3, 5, 4, 5, 5, 5, 4, 4, 5, 6, 5, 5, 6, 5, 6, 5, 5, 4, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 3, 5, 5, 4, 6, 6, 4, 6, 5, 4, 3, 6, 5, 5, 6, 5, 5, 5, 5, 5, 3, 6, 6, 6, 6, 5, 5, 6, 4, 3, 5, 4, 6, 4, 5, 1, 5, 5, 4, 4, 3, 5, 6, 4, 5, 6, 4, 6, 5, 5, 4, 4, 5, 6, 6, 5, 5, 4, 6, 4, 6, 6, 4, 6, 4, 5, 5, 4, 6, 4, 4, 6, 5, 3, 3, 6, 5, 5, 6, 5, 6, 5, 5, 5, 4],
    'mod': [5.0, 5.0, 5.0, 4.0, 4.0, 4.0, 5.0, 6.0, 5.0, 5.0, 4.0, 0.0, 5.0, 5.0, 5.0, 5.0, 4.0, 5.0, 1.0, 5.0, 5.0, 2.0, 5.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 4.0, 1.0, 5.0, 5.0, 5.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 4.0, 1.0, 1.0, 5.0, 4.0, 5.0, 2.0, 5.0, 5.0, 2.0, 4.0, 5.0, 4.0, 4.0, 6.0, 2.0, 5.0, 5.0, 4.0, 5.0, 5.0, 6.0, 5.0, 5.0, 6.0, 4.0, 5.0, 4.0, 2.0, 4.0, 4.0, 5.0, 5.0, 4.0, 5.0, 4.0, 3.0, 5.0, 6.0, 3.0, 4.0, 5.0, 1.0, 4.0, 3.0, 0.0, 5.0, 4.0, 3.0, 6.0, 4.0, 5.0, 6.0, 3.0, 1.0, 5.0, 4.0, 5.0, 5.0, 2.0, 6.0, 5.0, 3.0, 4.0, 3.0, 1.0, 1.0, 5.0, 5.0, 5.0, 2.0, 5.0, 4.0, 4.0, 4.0, 3.0, 4.0, 4.0, 6.0, 4.0, 3.0, 5.0, 4.0, 4.0, 5.0, 5.0, 3.0, 5.0, 6, 6, 6, 5, 6, 4, 4, 6, 5, 5, 6, 5, 6, 4, 6, 6, 5, 6, 1, 4, 5, 6, 5, 5, 4, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 2, 6, 5, 5, 6, 4, 4, 4, 4, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 4, 6, 5, 4, 2, 6, 6, 6, 6, 4, 6, 6, 3, 5, 1, 4, 6, 5, 4, 6, 1, 4, 5, 5, 3, 5, 6, 1, 4, 3, 4, 4, 5, 5, 5, 1, 5, 6, 3, 2, 5, 4, 5, 5, 1, 6, 5, 2, 6, 2, 1, 4, 5, 6, 5, 4, 6, 6, 4, 5, 4, 5, 4, 6, 4, 3, 6, 4, 4, 3, 6, 4, 5, 4, 2, 5, 5, 2, 4, 5, 6, 4, 6, 6, 5, 4, 4, 6, 4, 5, 5, 3, 4, 3, 5, 5, 5, 3, 5, 2, 6, 5, 3, 5, 4, 5, 4, 6, 1, 6, 5, 1, 2, 4, 1, 6, 5, 2, 5, 6, 6, 4, 6, 6, 4, 5, 5, 6, 4, 3, 1, 5, 3, 5, 6, 3, 4, 4, 2, 5, 4, 2, 1, 4, 3, 4, 5, 6, 4, 2, 5, 5, 5, 4, 5, 1, 4, 3, 4, 4, 4, 3, 4, 2, 5, 5, 3, 2, 4, 4, 4, 6, 1, 6, 2, 1, 2, 3, 1, 6, 4, 3, 3, 6, 6, 4, 5, 5, 3, 2, 3, 6, 4, 3, 2, 5, 4, 5, 5, 3, 4, 3, 2, 5, 5, 6, 4, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 2, 5, 1, 5, 3, 6, 5, 5, 4, 6, 5, 6, 5, 5, 6, 5, 3, 5, 5, 2, 6, 5, 4, 2, 4, 1, 6, 5, 3, 6, 5, 6, 5, 5, 6, 4, 5, 4, 6, 3, 5, 5, 5, 6, 5, 6, 6, 5, 2, 3, 4, 4, 5, 1, 4, 3, 5, 6, 6, 4, 4, 5, 6, 3, 1, 5, 1, 4, 3, 4, 4, 5, 4, 5, 4, 5, 5, 3, 5, 5, 2, 5, 5, 1, 6, 5, 4, 2, 3, 1, 6, 4, 2, 6, 4, 6, 4, 5, 5, 3, 4, 3, 6, 4, 3, 4, 5, 4, 5, 6, 6, 6]}
dfotherFeelingsandThoughts = pd.DataFrame(data=otherFeelingsandThoughts)
dfotherFeelingsandThoughts
generate_graph2(dfotherFeelingsandThoughts,'Understanding What Another Person Is Thinking / Feeling ')





# The above process was repeated for each comparison analyzed using different questions





# Below is how the comparisons were made for how much a participant thought about themself verses thinking
# About another


# ## This ran analysis comparing questions thinking about another person 
# ## Questions:  I considered that the friend might have an external reason to check the time, I considered the emotional effect the situation might have had on the other person, I considered the emotional effect the situation might have had on the other person.1
# ## To questions thinking about themself
# ## Questions: I considered that I might have an external reason to check the time, I considered the emotional effect the situation would have on me, I considered the emotional effect the situation would have on me.1




# Printing values for each stress level to questions thinking about themself
sameLengthList([42,45,49]) 

# Printing values for each stress level to questions thinking about other person
sameLengthList([39,46,50])

# Using these values to put into lists thinking about self vs another by stress group
HighThinkingSelf = [2.0, 5.0, 6.0, 3.0, 4.0, 5.0, 4.0, 4.0, 5.0, 4.0, 5.0, 5.0, 4.0, 5.0, 4.0, 5.0, 4.0, 2.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 3.0, 4.0, 4.0, 5.0, 6.0, 4.0, 3.0, 5.0, 4.0, 5.0, 5.0, 1.0, 5.0, 4.0, 1.0, 6.0, 3.0, 4.0, 4.0, 6.0, 2.0, 4.0, 4.0, 4.0, 5.0, 4.0, 4, 6.0, 4.0, 3.0, 4.0, 4.0, 5.0, 5.0, 4.0, 5.0, 6.0, 6.0, 5.0, 0.0, 5.0, 4.0, 6.0, 5.0, 4.0, 4.0, 5.0, 4.0, 2.0, 5.0, 4.0, 5.0, 3.0, 6.0, 4.0, 5.0, 5.0, 4.0, 5.0, 6.0, 5.0, 4.0, 4.0, 4.0, 5.0, 4.0, 4.0, 5.0, 6.0, 4.0, 5.0, 6.0, 3.0, 4.0, 5.0, 6.0, 5.0, 5.0, 6.0, 3.0, 5.0, 4.0, 6.0, 5.0, 2.0, 5.0, 5.0, 4.0, 5.0, 5.0, 5.0, 5.0, 6.0, 5.0, 4.0, 5.0, 5.0, 5.0, 4.0, 5.0, 6.0, 3.0, 4, 0, 5, 3, 5, 1, 4, 5, 6, 3, 4, 4, 4, 6, 3, 5, 4, 5, 6, 4, 4, 1, 1, 4, 5, 5, 5, 4, 1, 4, 5, 4, 6, 6, 3, 4, 6, 4, 4, 5, 6, 3, 6, 5, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 6, 5, 5, 5, 4, 5, 4, 5, 5, 3]
LowHighThinkingSelf = [4.0, 5.0, 4.0, 3.0, 5.0, 3.0, 4.0, 4.0, 4.0, 2.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 4.0, 5.0, 4.0, 4.0, 4.0, 6.0, 3.0, 4.0, 5.0, 4.0, 6.0, 3.0, 5.0, 4.0, 5.0, 4.0, 5.0, 4.0, 4.0, 4.0, 6.0, 5.0, 5.0, 5.0, 5.0, 4.0, 5.0, 5.0, 4.0, 4.0, 5.0, 4.0, 6.0, 4.0, 5.0, 6.0, 4.0, 5.0, 4.0, 5.0, 5.0, 3.0, 5.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 6.0, 4.0, 4.0, 5.0, 5.0, 5.0, 3.0, 5.0, 2.0, 4.0, 5.0, 4.0, 3.0, 5.0, 3.0, 5.0, 5.0, 4.0, 5.0, 3.0, 5.0, 3.0, 2.0, 5.0, 4.0, 5.0, 1.0, 2.0, 3.0, 4.0, 2.0, 4.0, 4.0, 6.0, 5.0, 2.0, 4.0, 4.0, 6.0, 5.0, 4.0, 3.0, 2.0, 2.0, 5.0, 2.0, 4.0, 4.0, 4.0, 5.0, 4, 3.0, 5.0, 5.0, 5.0, 5.0, 3.0, 5.0, 4.0, 1.0, 4.0, 5.0, 4.0, 6, 5, 5, 4, 3, 5, 5, 3, 3, 4, 2, 5, 5, 4, 2, 4, 4, 6, 3, 5, 4, 5, 3, 2, 6, 2, 5, 2, 3, 3, 4, 2, 4, 6, 6, 5, 1, 6, 5, 6, 6, 2, 4, 4, 2, 5, 3, 1, 5, 2, 2, 6, 4, 4, 5, 5, 5, 5, 3, 2, 1, 5, 5, 3]
ModHighThinkingSelf = [5.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 4.0, 5.0, 5.0, 4.0, 5.0, 4.0, 5.0, 5.0, 4.0, 5.0, 5.0, 2.0, 5.0, 5.0, 4.0, 4.0, 4.0, 3.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 6.0, 2.0, 6.0, 5.0, 3.0, 5.0, 5.0, 5.0, 6.0, 6.0, 4.0, 4.0, 5.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 3.0, 2.0, 3.0, 6.0, 5.0, 5.0, 6.0, 5.0, 4.0, 4.0, 5.0, 4.0, 4.0, 2.0, 3.0, 4.0, 5.0, 6.0, 6.0, 4.0, 5.0, 5.0, 5.0, 5.0, 2.0, 2.0, 1.0, 5.0, 3.0, 4.0, 4.0, 4.0, 5.0, 1.0, 4.0, 6.0, 6.0, 4.0, 3.0, 5.0, 4.0, 5.0, 5.0, 2.0, 6.0, 3.0, 3.0, 4.0, 2.0, 1.0, 4.0, 6.0, 5.0, 5.0, 5.0, 4.0, 4.0, 5.0, 3.0, 5.0, 6.0, 3.0, 6.0, 2.0, 3.0, 5.0, 3.0, 4.0, 5.0, 4.0, 6.0, 4.0, 4, 4, 5, 4, 2, 2, 4, 3, 4, 4, 3, 4, 2, 5, 5, 4, 2, 1, 1, 5, 3, 5, 5, 4, 6, 2, 6, 4, 6, 5, 5, 5, 6, 3, 5, 2, 6, 6, 2, 6, 4, 1, 4, 6, 6, 4, 6, 4, 5, 6, 3, 5, 5, 4, 3, 2, 3, 5, 3, 0, 5, 6, 6, 5]

HighThinkingOther = [3, 5, 6, 5, 4, 5, 5, 2, 5, 4, 5, 5, 4, 5, 4, 4, 4, 5, 5, 5, 4, 0, 4, 4, 5, 5, 3, 6, 6, 2, 5, 3, 6, 6, 3, 5, 5, 0, 4, 4, 1, 6, 5, 3, 4, 6, 2, 5, 5, 2, 4, 5, 5, 0, 4, 3, 4, 4, 6, 5, 4, 4, 5, 5, 2.0, 0.0, 5.0, 5.0, 1.0, 2.0, 4.0, 4.0, 5.0, 2.0, 4.0, 5.0, 4.0, 4.0, 3.0, 6.0, 4.0, 2.0, 4.0, 0.0, 2.0, 1.0, 5.0, 4.0, 4.0, 4.0, 3.0, 1.0, 2.0, 0.0, 6.0, 2.0, 4.0, 4.0, 3.0, 3.0, 4.0, 4.0, 4.0, 3.0, 0.0, 3.0, 6.0, 4.0, 5.0, 4.0, 4.0, 3.0, 5.0, 4.0, 1.0, 5.0, 5.0, 5.0, 6.0, 4.0, 4.0, 2.0, 1.0, 5.0, 4.0, 4.0, 5.0, 1.0, 5.0, 0.0, 6.0, 4.0, 5.0, 5.0, 5.0, 3.0, 0.0, 3.0, 4.0, 5.0, 4.0, 0.0, 3.0, 5.0, 4.0, 5.0, 5.0, 4.0, 5.0, 0.0, 5.0, 4.0, 5.0, 5.0, 5.0, 6.0, 5.0, 1.0, 6.0, 4.0, 0.0, 0.0, 3.0, 4.0, 0.0, 5.0, 4.0, 5.0, 6.0, 3.0, 4.0, 5.0, 6.0, 5.0, 5.0, 6.0, 0.0, 2.0, 5.0, 5.0, 5.0, 0.0, 0.0, 4.0, 4.0, 4.0, 5.0, 6.0, 4.0, 5.0, 5.0, 3.0]
LowThinkingOther = [6, 4, 4, 4, 4, 3, 4, 5, 3, 5, 4, 4, 4, 6, 4, 5, 5, 5, 4, 4, 5, 6, 2, 4, 5, 4, 6, 2, 4, 2, 2, 4, 4, 4, 3, 1, 6, 5, 6, 6, 1, 5, 5, 4, 4, 4, 6, 6, 5, 2, 5, 5, 4, 5, 4, 4, 1, 5, 5, 2, 3, 4, 2, 4, 6.0, 5.0, 6.0, 4.0, 3.0, 5.0, 5.0, 5.0, 4.0, 3.0, 2.0, 2.0, 5.0, 4.0, 2.0, 2.0, 3.0, 5.0, 2.0, 3.0, 5.0, 5.0, 5.0, 2.0, 6.0, 2.0, 5.0, 5.0, 2.0, 2.0, 3.0, 5.0, 2.0, 4.0, 3.0, 3.0, 5.0, 4.0, 4.0, 5.0, 2.0, 1.0, 2.0, 2.0, 3.0, 5.0, 3.0, 4.0, 5.0, 0.0, 5.0, 0.0, 4.0, 3.0, 4.0, 5.0, 3.0, 4.0, 5.0, 1.0, 1.0, 2.0, 3.0, 3.0, 4, 5.0, 6.0, 4.0, 5.0, 5.0, 5.0, 5.0, 3.0, 5.0, 4.0, 5.0, 5.0, 4.0, 6.0, 5.0, 5.0, 6.0, 3.0, 5.0, 5.0, 5.0, 5.0, 2.0, 4.0, 2.0, 6.0, 5.0, 3.0, 5.0, 4.0, 5.0, 5.0, 6.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 5.0, 4.0, 4.0, 2.0, 5.0, 3.0, 5.0, 3.0, 4.0, 6.0, 5.0, 3.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0, 5.0, 4.0, 5.0, 5.0, 4.0]
ModThinkingOther = [4, 2, 5, 4, 6, 5, 3, 4, 5, 5, 3, 5, 2, 5, 5, 4, 5, 4, 2, 5, 5, 4, 4, 5, 1, 4, 2, 4, 1, 5, 5, 2, 1, 5, 6, 1, 6, 4, 4, 5, 5, 5, 5, 3, 2, 5, 6, 4, 6, 5, 5, 6, 4, 4, 5, 4, 4, 4, 4, 4, 5, 6, 6, 5, 4.0, 4.0, 4.0, 4.0, 1.0, 3.0, 2.0, 4.0, 2.0, 2.0, 3.0, 4.0, 2.0, 5.0, 4.0, 5.0, 4.0, 2.0, 3.0, 4.0, 3.0, 5.0, 4, 4.0, 5.0, 0.0, 5.0, 5.0, 0.0, 0.0, 2.0, 4.0, 4.0, 4.0, 2.0, 3.0, 4.0, 3.0, 3.0, 4.0, 5.0, 1.0, 4.0, 2.0, 2.0, 5.0, 2.0, 3.0, 4.0, 4.0, 3.0, 3.0, 2.0, 3.0, 3.0, 1.0, 4.0, 4.0, 2.0, 0.0, 5.0, 4.0, 6.0, 4.0, 4.0, 4.0, 5.0, 5.0, 6.0, 2.0, 4.0, 3.0, 5.0, 5.0, 5.0, 6.0, 5.0, 4.0, 5.0, 6.0, 5.0, 5.0, 2.0, 3.0, 3.0, 5.0, 5.0, 5.0, 6.0, 1.0, 5.0, 6.0, 6.0, 5.0, 5.0, 5.0, 4.0, 3.0, 5.0, 2.0, 6.0, 2.0, 2.0, 5.0, 4.0, 5.0, 4.0, 2.0, 4.0, 6.0, 4.0, 4.0, 5.0, 5.0, 3.0, 4.0, 5.0, 3.0, 6.0, 3.0, 4.0, 5.0, 4.0, 2.0, 5.0, 6.0, 6.0, 5.0]


# Calculating and printing the difference between these thinking about self - thinking about other for
# Each stress group

HSelfMinusOther = []
LSelfMinusOther = []
MSelfMinusOther = []

for i in range(len(HighThinkingSelf)):
    HSelfMinusOther.append(HighThinkingSelf[i] - HighThinkingOther[i])
print('High Thinking Self - Other')
print(HSelfMinusOther)

for i in range(len(LowHighThinkingSelf)):
    LSelfMinusOther.append(LowHighThinkingSelf[i] - LowThinkingOther[i])
print('\n Low Thinking Self - Other')
print(LSelfMinusOther)

for i in range(len(ModHighThinkingSelf)):
    MSelfMinusOther.append(ModHighThinkingSelf[i] - ModThinkingOther[i])
print('\n Mod Thinking Self - Other')
print(MSelfMinusOther)





# Running ANOVA and generating graph based on these difference values

# Thinking About Self - Thinking About Other 
sectionSOindividual = {'high': [-1.0, 0.0, 0.0, -2.0, 0.0, 0.0, -1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -3.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0, -2.0, 3.0, 1.0, 1.0, -3.0, -1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, -2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, 2.0, 1.0, -1.0, -1, 6.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 3.0, 0.0, 0.0, -1.0, 5.0, 3.0, 0.0, 0.0, 0.0, 2.0, -2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 3.0, 1.0, 4.0, 3.0, 5.0, 0.0, 0.0, 0.0, 0.0, 2.0, 3.0, 2.0, 5.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 1.0, 2.0, 1.0, 2.0, 6.0, 0.0, -1.0, 0.0, 1.0, 1.0, -2.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 4.0, 0.0, 0.0, 1.0, 1.0, 2.0, -1.0, 0.0, -1.0, -1.0, 0.0, -4.0, -1.0, 2.0, 6.0, 0.0, 0.0, -1.0, 0.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0, 1.0, -4.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, 3.0, -1.0, 0.0, 6.0, 6.0, 0.0, 0.0, 6.0, -1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, -1.0, 0.0, 6.0, 4.0, 0.0, 0.0, 0.0, 6.0, 6.0, 1.0, 1.0, 1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0],  
     'low': [-2.0, 1.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -3.0, 0.0, 0.0, 1.0, -1.0, 1.0, 0.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 3.0, 0.0, 1.0, 0.0, 1.0, 3.0, 0.0, 0.0, -1.0, -1.0, 4.0, -1.0, 0.0, 1.0, 0.0, 0.0, -1.0, -2.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 4.0, -2.0, 0.0, -1.0, -1.0, 0.0, -1.0, -2.0, 0.0, 1.0, -2.0, 0.0, 2.0, 0.0, 0.0, -2.0, 1.0, -1.0, 2.0, 3.0, -1.0, -1.0, 3.0, 1.0, 2.0, 0.0, 2.0, 2.0, -2.0, 0.0, -2.0, 0.0, -1.0, 2.0, 0.0, -4.0, 0.0, 1.0, 1.0, -3.0, 2.0, 0.0, 3.0, 2.0, -3.0, 0.0, 0.0, 1.0, 3.0, 3.0, 1.0, 0.0, -1.0, 0.0, -1.0, 0.0, -1.0, 4.0, 0.0, 4.0, -1.0, 2.0, 1.0, 0.0, 2.0, -1.0, 0.0, 3.0, 0.0, 2.0, 2.0, 1.0, 2, 0.0, -1.0, 0.0, -2.0, 0.0, 0.0, -2.0, 0.0, -1.0, -2.0, 0.0, 0.0, 0.0, -4.0, -1.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0, -2.0, 0.0, 2.0, 0.0, -1.0, -3.0, 0.0, -2.0, 0.0, -3.0, -1.0, 0.0, 1.0, 0.0, -4.0, 0.0, -1.0, 0.0, 0.0, -3.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.0, 2.0, -2.0, -4.0, 1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, -1.0, -3.0, -3.0, 0.0, 0.0, -1.0],
    'mod': [1.0, 2.0, -1.0, 0.0, -1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 2.0, 1.0, 3.0, 1.0, 4.0, 0.0, -1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, -1.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, -1.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 1.0, 1.0, 0.0, 1.0, -1.0, -2.0, -1.0, 2.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, -1.0, 1.0, 0.0, 3.0, 4.0, 3.0, 0.0, 3.0, 0.0, 1.0, 0.0, -2.0, 0.0, -2.0, 1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, -1.0, 1.0, 6.0, 4.0, 1.0, 1.0, 0.0, 1.0, 3.0, -1.0, 2.0, 0.0, 0.0, 0.0, -3.0, 0.0, 0.0, 4.0, 3.0, 0.0, 3.0, 1.0, 0.0, 1.0, 0.0, 2.0, 4.0, 0.0, 3.0, 1.0, -1.0, 1.0, 1.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -4.0, 0.0, 0.0, 0.0, -1.0, -1.0, -2.0, -2.0, -3.0, 1.0, 0.0, -2.0, -3.0, -4.0, -1.0, 2.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 1.0, -2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 1.0, 0.0, -4.0, 0.0, 4.0, 2.0, -2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, -3.0, -1.0, -1.0, 0.0, -1.0, -2.0, 0.0, 0.0, 0.0, 0.0]}
dfsectionSOindividual = pd.DataFrame(data=sectionSOindividual)
dfsectionSOindividual
generate_graph2(dfsectionSOindividual,'Thinking About Self - Thinking About Other')





# The above was repeated to calculate self in right - other in right 
# and to calculate annoyed at self - annoyed at other

